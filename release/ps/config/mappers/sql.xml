<?xml version="1.0" encoding="UTF-8" ?><!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd"><mapper namespace="com.happyhouse.servers.ps.core.dao.PushDao">    <resultMap id="pushKeyMap" type="casemap">        <result property="id" column="id" javaType="int"/>        <result property="pfsIpPort" column="pfsIpPort"/>    </resultMap>    <insert id="insertPushGroup" parameterType="pushItem">		INSERT INTO MPPS_PUSH_GROUP  WITH (ROWLOCK)           (            PUSH_GROUP_KEY           ,PUSH_GROUP_ID           ,PUSH_GROUP_STATUS           ,SYSTEM_ID           ,REG_DT           )     VALUES           (           #{pushGroupKey}           ,#{pushGroupId}           ,0           ,#{systemId}           ,GETDATE()           )	</insert>    <insert id="insertPushGroupWithMessagePushItem" parameterType="mpushItem">		INSERT INTO MPPS_PUSH_GROUP  WITH (ROWLOCK)           (            PUSH_GROUP_KEY           ,PUSH_GROUP_ID           ,PUSH_GROUP_STATUS           ,SYSTEM_ID           ,REG_DT           )     VALUES           (           #{pushGroupKey}           ,#{pushGroupId}           ,0           ,#{systemId}           ,GETDATE()           )	</insert>    <insert id="insertPushData" parameterType="pushItem">		DECLARE @PAYLOAD NVARCHAR(max) = #{payload, jdbcType=NVARCHAR}		INSERT INTO MPPS_PUSH_DATA  WITH (ROWLOCK)           (            PUSH_GROUP_KEY           ,PUSH_GROUP_ID           ,PUSH_ID           ,SYSTEM_ID           ,MSG_UUID           ,PUSH_RECEIVER           ,NOTI_MSG_SEND_YN           ,MSG_TYPE           ,PAYLOAD           ,PPC_BROADCAST_ACT_NM           ,PPC_APP_NM           ,PPC_PACKAGE_NM           ,PPC_MODE           ,FAILOVER           ,PRIORITY           ,PPC_TTL           ,REG_DT           )     VALUES           (           #{pushGroupKey}           ,#{pushGroupId}           ,#{pushDataId}           ,#{systemId}           ,#{messageUuid}           ,#{pushReceiver}           ,'Y'           ,#{messageType}           ,@PAYLOAD           ,#{ppcBroadcastAction}           ,#{ppcApplicationName}           ,#{ppcApplicationPackageName}           ,#{ppcMode}           ,0           ,1           ,0           ,GETDATE()           )	</insert>    <insert id="insertPushDataWithMessagePushItem" parameterType="mpushItem">		DECLARE @PAYLOAD NVARCHAR(max) = #{payload, jdbcType=NVARCHAR}			INSERT INTO MPPS_PUSH_DATA  WITH (ROWLOCK)           (            PUSH_GROUP_KEY           ,PUSH_GROUP_ID            ,PUSH_ID            ,SYSTEM_ID           ,MSG_UUID           ,PUSH_RECEIVER           ,NOTI_MSG_SEND_YN           ,MSG_TYPE           ,PAYLOAD           ,PPC_BROADCAST_ACT_NM           ,PPC_APP_NM           ,PPC_PACKAGE_NM           ,PPC_MODE           ,FAILOVER           ,PRIORITY           ,PPC_TTL           ,REG_DT           )     VALUES           (           #{pushGroupKey}           ,#{pushGroupId}           ,#{pushDataId}           ,#{systemId}           ,#{messageUuid}           ,#{pushReceiver}           ,'Y'           ,#{messageType}           ,@PAYLOAD           ,#{ppcBroadcastAction}           ,#{ppcApplicationName}           ,#{ppcApplicationPackageName}           ,#{ppcMode}           ,0           ,1           ,0           ,GETDATE()           )	</insert>    <insert id="insertPushDevice" parameterType="pushItem">		INSERT INTO MPPS_PUSH_DEVICE  WITH (ROWLOCK)           (            PUSH_ID           ,PUSH_DEVICE_ID           ,MSG_UUID           ,SYSTEM_ID           ,DEVICE_MSG_UUID           ,PPC_SEND_YN           ,GCM_SEND_YN           ,APNS_SEND_YN           ,PPC_PUSH_KEY           ,GCM_PUSH_KEY           ,APNS_PUSH_KEY           ,ALLOWED_GCM_MSG_KEY           ,ALLOWED_APNS_MSG_KEY           ,REG_DT           )     VALUES           (            #{pushDataId}           ,#{pushDeviceId}           ,#{messageUuid}           ,#{systemId}           ,#{deviceMessageUuid}           ,ISNULL(CONVERT(varchar(256),#{toPpc}),'N')           ,ISNULL(CONVERT(varchar(256),#{toGcm}),'N')           ,ISNULL(CONVERT(varchar(256),#{toApns}),'N')           ,ISNULL(CONVERT(varchar(256),#{ppcPushKey}),'')           ,ISNULL(CONVERT(varchar(256),#{gcmPushKey}),'')           ,ISNULL(CONVERT(varchar(256),#{apnsPushKey}),'')           ,ISNULL(CONVERT(varchar(256),#{allowedGcmPayloadKey}),'*')           ,ISNULL(CONVERT(varchar(256),#{allowedApnsPayloadKey}),'*')           ,GETDATE()           )	</insert>    <insert id="insertPushDeviceWithMessagePushItem" parameterType="mpushItem">		INSERT INTO MPPS_PUSH_DEVICE  WITH (ROWLOCK)           (            PUSH_ID           ,PUSH_DEVICE_ID           ,MSG_UUID           ,SYSTEM_ID           ,DEVICE_MSG_UUID           ,PPC_SEND_YN           ,GCM_SEND_YN           ,APNS_SEND_YN           ,PPC_PUSH_KEY           ,GCM_PUSH_KEY           ,APNS_PUSH_KEY           ,ALLOWED_GCM_MSG_KEY           ,ALLOWED_APNS_MSG_KEY           ,REG_DT           )     VALUES           (           #{pushDataId}           ,#{pushDeviceId}           ,#{messageUuid}           ,#{systemId}           ,#{deviceMessageUuid}           ,ISNULL(CONVERT(varchar,#{toPpc}),'N')           ,ISNULL(CONVERT(varchar,#{toGcm}),'N')           ,ISNULL(CONVERT(varchar,#{toApns}),'N')           ,ISNULL(CONVERT(varchar,#{ppcPushKey}),'')           ,ISNULL(CONVERT(varchar,#{gcmPushKey}),'')           ,ISNULL(CONVERT(varchar,#{apnsPushKey}),'')           ,ISNULL(CONVERT(varchar,#{allowedGcmPayloadKey}),'*')           ,ISNULL(CONVERT(varchar,#{allowedApnsPayloadKey}),'*')           ,GETDATE()           )	</insert>    <insert id="insertPrivatePushStatus" parameterType="pushItem">		MERGE MPPS_PUSH_DEVICE_PROGRESS T			USING (				VALUES(					#{pushDeviceId}					,'01'					,#{systemId}					,#{deviceMessageUuid}					,#{ppcPushStatus}					,0					,GETDATE()					,GETDATE()				)			) AS S (				PUSH_DEVICE_ID				,PUSH_TYPE				,SYSTEM_ID				,DEVICE_MSG_UUID				,STATUS				,FAIL_CNT				,REG_DT				,UPT_DT			)			ON	T.SYSTEM_ID=S.SYSTEM_ID 				AND T.PUSH_DEVICE_ID=S.PUSH_DEVICE_ID 				AND T.PUSH_TYPE='01'		WHEN MATCHED THEN			UPDATE SET				T.DEVICE_MSG_UUID=#{deviceMessageUuid}				,T.STATUS=#{ppcPushStatus}				,T.FAIL_CNT=0				,T.REG_DT=GETDATE()				,T.UPT_DT=GETDATE()		WHEN NOT MATCHED THEN			INSERT            (            PUSH_DEVICE_ID           ,PUSH_TYPE           ,SYSTEM_ID           ,DEVICE_MSG_UUID           ,STATUS           ,FAIL_CNT           ,REG_DT           ,UPT_DT           )     VALUES           (           #{pushDeviceId}           ,'01'           ,#{systemId}           ,#{deviceMessageUuid}           ,#{ppcPushStatus}           ,0           ,GETDATE()           ,GETDATE()           )		;	</insert>    <insert id="insertGcmPushStatus" parameterType="pushItem">		INSERT INTO MPPS_PUSH_DEVICE_PROGRESS  WITH (ROWLOCK)           (           PUSH_DEVICE_ID           ,PUSH_TYPE           ,SYSTEM_ID           ,DEVICE_MSG_UUID           ,STATUS           ,FAIL_CNT           ,REG_DT           ,UPT_DT           )     VALUES           (           #{pushDeviceId}           ,'03'           ,#{systemId}           ,#{deviceMessageUuid}           ,#{gcmPushStatus}           ,#{gcmPushFailCount}           ,GETDATE()           ,GETDATE()           )	</insert>    <insert id="insertApnsPushStatus" parameterType="pushItem">		INSERT INTO MPPS_PUSH_DEVICE_PROGRESS  WITH (ROWLOCK)           (            PUSH_DEVICE_ID           ,PUSH_TYPE           ,SYSTEM_ID           ,DEVICE_MSG_UUID           ,STATUS           ,FAIL_CNT           ,REG_DT           ,UPT_DT           )     VALUES           (           #{pushDeviceId}           ,'02'           ,#{systemId}           ,#{deviceMessageUuid}           ,#{apnsPushStatus}           ,#{apnsPushFailCount}           ,GETDATE()           ,GETDATE()           )	</insert>    <insert id="insertPrivatePushSuccessStatus" parameterType="pushItem">		MERGE MPPS_PUSH_DEVICE_SUCCESS T			USING (				VALUES(					#{pushDeviceId}					,'01'					,#{systemId}					,#{deviceMessageUuid}					,#{ppcPushStatus}					,0					,GETDATE()					,GETDATE()				)			) AS S (				PUSH_DEVICE_ID				,PUSH_TYPE				,SYSTEM_ID				,DEVICE_MSG_UUID				,STATUS				,FAIL_CNT				,REG_DT				,UPT_DT			)			ON	T.SYSTEM_ID=S.SYSTEM_ID 				AND T.PUSH_DEVICE_ID=S.PUSH_DEVICE_ID 				AND T.PUSH_TYPE='01'		WHEN MATCHED THEN			UPDATE SET				T.DEVICE_MSG_UUID=#{deviceMessageUuid}				,T.STATUS=#{ppcPushStatus}				,T.FAIL_CNT=0				,T.REG_DT=GETDATE()				,T.UPT_DT=GETDATE()		WHEN NOT MATCHED THEN			INSERT            (           PUSH_DEVICE_ID           ,PUSH_TYPE           ,SYSTEM_ID           ,DEVICE_MSG_UUID           ,STATUS           ,FAIL_CNT           ,REG_DT           ,UPT_DT           )     VALUES           (           #{pushDeviceId}           ,'01'           ,#{systemId}           ,#{deviceMessageUuid}           ,#{ppcPushStatus}           ,0           ,GETDATE()           ,GETDATE()           )		;	</insert>    <insert id="insertGcmPushSuccessStatus" parameterType="pushItem">		INSERT INTO MPPS_PUSH_DEVICE_SUCCESS  WITH (ROWLOCK)           (           PUSH_DEVICE_ID           ,PUSH_TYPE           ,SYSTEM_ID           ,DEVICE_MSG_UUID           ,STATUS           ,FAIL_CNT           ,REG_DT           ,UPT_DT           )     VALUES           (           #{pushDeviceId}           ,'03'           ,#{systemId}           ,#{deviceMessageUuid}           ,#{gcmPushStatus}           ,#{gcmPushFailCount}           ,GETDATE()           ,GETDATE()           )	</insert>    <insert id="insertApnsPushSuccessStatus" parameterType="pushItem">		INSERT INTO MPPS_PUSH_DEVICE_SUCCESS  WITH (ROWLOCK)           (            PUSH_DEVICE_ID           ,PUSH_TYPE           ,SYSTEM_ID           ,DEVICE_MSG_UUID           ,STATUS           ,FAIL_CNT           ,REG_DT           ,UPT_DT           )     VALUES           (           #{pushDeviceId}           ,'02'           ,#{systemId}           ,#{deviceMessageUuid}           ,#{apnsPushStatus}           ,#{apnsPushFailCount}           ,GETDATE()           ,GETDATE()           )	</insert>    <insert id="insertPushHistory" parameterType="pushStatus">		INSERT INTO MPPS_PUSH_DATA_HISTORY  WITH (ROWLOCK)           (            DEVICE_MSG_UUID           ,PPC_PUSH_STATUS           ,GCM_PUSH_STATUS           ,APNS_PUSH_STATUS           ,REG_DT           )     VALUES           (           #{deviceMessageUuid}           ,#{ppcPushStatus}           ,#{gcmPushStatus}           ,#{apnsPushStatus}           ,GETDATE()           )	</insert>    <insert id="insertKeepAliveMessage" parameterType="pushStatus">		INSERT INTO MPPS_KEEP_ALIVE  WITH (ROWLOCK)           (            PPC_PUSH_KEY           ,SEQ           ,PFS_IP_PORT           ,REG_DT           )     VALUES           (           #{PPC_PUSH_KEY}           ,(SELECT ISNULL(MAX(SEQ)+1,0) FROM MPPS_KEEP_ALIVE WHERE PPC_PUSH_KEY = #{PPC_PUSH_KEY})           ,#{PFS_IP_PORT}           ,GETDATE()           )	</insert>    <insert id="insertPushKeyMapWithMap" parameterType="map">		insert into MPPS_PUSH_KEY_MAP  WITH (ROWLOCK)           (           	PUSH_RECEIVER,			UUID,			PPC_PUSH_KEY,			APNS_PUSH_KEY,			GCM_PUSH_KEY,			PFS_IP_PORT,			LOCALE,			STATUS,			FIRST_REGISTER,			REG_DT,			LAST_MODIFIER,			UPT_DT           )	     values	      (	      	#{svcName},	      	#{uuid},	      	#{privatePushKey},	      	#{apnsPushKey},	      	#{gcmPushKey},	      	#{serverInfo},	      	#{locale},	      	'10',	      	'SERVER',	      	GETDATE(),	      	'SERVER',	      	GETDATE()	      )	</insert>    <insert id="insertPushKeyMap" parameterType="pushKeyItem">		insert into MPPS_PUSH_KEY_MAP  WITH (ROWLOCK)           (           	PUSH_RECEIVER,			UUID,			PPC_PUSH_KEY,			APNS_PUSH_KEY,			GCM_PUSH_KEY,			PFS_IP_PORT,			LOCALE,			STATUS,			FIRST_REGISTER,			REG_DT,			LAST_MODIFIER,			UPT_DT           )	     values	      (	      	#{svcName},	      	#{uuid},	      	#{privatePushKey},	      	#{apnsPushKey},	      	#{gcmPushKey},	      	#{serverInfo},	      	#{locale},	      	'10',	      	'SERVER',	      	GETDATE(),	      	'SERVER',	      	GETDATE()	      )	</insert>    <insert id="insertPushServerInfo" parameterType="pushKeyItem">		insert into MPPS_SERVER_INFO  WITH (ROWLOCK)           (           	SYSTEM_ID,			IP,			PORT,			STATUS,			FIRST_REGISTER,			REG_DT,			LAST_MODIFIER,			UPT_DT           )	     values	      (	      	#{SYSTEM_ID},	      	#{IP},	      	#{PORT},	      	10,	      	'SERVER',	      	GETDATE(),	      	'SERVER',	      	GETDATE()	      )	</insert>    <insert id="insertNotificationMessage" parameterType="map">		INSERT INTO  MPPS_NOTI_MSG  WITH (ROWLOCK)           (              NOTI_MSG_TYPE           , PPC_PUSH_KEY            , DEVICE_TYPE            , NOTI_SEND_CNT            , NOTI_STATUS            , REG_DT            , UPT_DT            )         VALUES         (         	 #{NOTI_MSG_TYPE}            , #{PPC_PUSH_KEY}           , #{DEVICE_TYPE}            , 1           , #{NOTI_STATUS}            , GETDATE()            , GETDATE()          )	</insert>    <update id="updatePushStatus" parameterType="map">		UPDATE MPPS_PUSH_DEVICE_PROGRESS WITH (ROWLOCK)			SET STATUS = #{pushStatus},				UPT_DT = getDate()		WHERE DEVICE_MSG_UUID = #{deviceMessageUuid} AND PUSH_TYPE=#{pushType} AND STATUS > 0	</update>    <update id="updatePrivatePushStatus" parameterType="pushItem">		UPDATE MPPS_PUSH_DEVICE_PROGRESS WITH (ROWLOCK)			SET STATUS = #{ppcPushStatus},				UPT_DT = getDate()		WHERE DEVICE_MSG_UUID = #{deviceMessageUuid} AND STATUS > 0	</update>    <update id="updateGcmPushStatus" parameterType="pushItem">		UPDATE MPPS_PUSH_DEVICE_PROGRESS WITH (ROWLOCK)			SET STATUS = #{gcmPushStatus},				UPT_DT = getDate()		WHERE DEVICE_MSG_UUID = #{deviceMessageUuid}	</update>    <update id="updateApnsPushStatus" parameterType="pushItem">		UPDATE MPPS_PUSH_DEVICE_PROGRESS WITH (ROWLOCK)			SET STATUS = #{apnsPushStatus},				UPT_DT = getDate()		WHERE DEVICE_MSG_UUID = #{deviceMessageUuid}	</update>    <update id="updateGcmPushItemStatusWithFailCount" parameterType="pushItem">		UPDATE MPPS_PUSH_DEVICE_PROGRESS WITH (ROWLOCK)			SET STATUS = #{gcmPushStatus},				FAIL_CNT = #{gcmPushFailCount},				UPT_DT = getDate()		WHERE DEVICE_MSG_UUID = #{deviceMessageUuid}	</update>    <update id="updateApnsPushItemStatusWithFailCount" parameterType="pushItem">		UPDATE MPPS_PUSH_DEVICE_PROGRESS WITH (ROWLOCK)			SET STATUS = #{apnsPushStatus},				FAIL_CNT = #{apnsPushFailCount},				UPT_DT = getDate()		WHERE DEVICE_MSG_UUID = #{deviceMessageUuid}	</update>    <update id="updatePushKeyMapWithMap" parameterType="map">		UPDATE MPPS_PUSH_KEY_MAP WITH (ROWLOCK)		SET			APNS_PUSH_KEY = #{apnsPushKey},			GCM_PUSH_KEY = #{gcmPushKey},			PFS_IP_PORT = #{serverInfo},			LOCALE = #{locale},			LAST_MODIFIER = 'SERVER',			UPT_DT = GETDATE()		WHERE PPC_PUSH_KEY = #{privatePushKey}	</update>    <update id="updatePushKeyMap" parameterType="pushKeyItem">		UPDATE MPPS_PUSH_KEY_MAP WITH (ROWLOCK)		SET			APNS_PUSH_KEY = #{apnsPushKey},			GCM_PUSH_KEY = #{gcmPushKey},			PFS_IP_PORT = #{serverInfo},			LOCALE = #{locale},			LAST_MODIFIER = 'SERVER',			UPT_DT = GETDATE()		WHERE PPC_PUSH_KEY = #{privatePushKey}	</update>    <update id="updatePushServerInfo" parameterType="map">		UPDATE MPPS_SERVER_INFO WITH (ROWLOCK)		SET             IP = #{IP}           , PORT =#{PORT}           , STATUS =#{STATUS}           , LAST_MODIFIER  = 'SERVER'           , UPT_DT = GETDATE()        WHERE SYSTEM_ID = #{SYSTEM_ID}	</update>    <update id="updatePushServerStatus" parameterType="map">		UPDATE MPPS_SERVER_INFO WITH (ROWLOCK)           , STATUS =#{STATUS}           , LAST_MODIFIER  = 'SERVER'           , UPT_DT = GETDATE()        WHERE SYSTEM_ID = #{SYSTEM_ID}	</update>    <update id="updateNotificationMessage" parameterType="map">		UPDATE 			 MPPS_NOTI_MSG WITH (ROWLOCK)		SET             NOTI_SEND_CNT = NOTI_SEND_CNT +1            ,NOTI_STATUS =#{NOTI_STATUS}             ,UPT_DT = GETDATE()         WHERE           PPC_PUSH_KEY =  #{PPC_PUSH_KEY}	</update>    <!-- AND DATEDIFF(S,MPPS_PUSH_DATA.REG_DT,GETDATE()) > 60        NOT USED      -->    <!-- NOT USED ANY MORE-->    <update id="updatePushGroupIdInPushData" parameterType="String">		UPDATE			MPPS_PUSH_DATA WITH (ROWLOCK)		SET			MPPS_PUSH_DATA.PUSH_GROUP_ID = MPPS_PUSH_GROUP.ID		FROM MPPS_PUSH_GROUP WITH (NOLOCK)		WHERE MPPS_PUSH_DATA.PUSH_GROUP_ID =-1 AND MPPS_PUSH_GROUP.PUSH_GROUP_KEY=MPPS_PUSH_DATA.PUSH_GROUP_KEY 		  AND MPPS_PUSH_DATA.SYSTEM_ID=#{SYSTEM_ID}		</update>    <!-- AND DATEDIFF(S,MPPS_PUSH_DEVICE.REG_DT,GETDATE()) > 60        NOT USED      -->    <!-- NOT USED ANY MORE-->    <update id="updatePushIdInPushDevice" parameterType="String">		UPDATE			MPPS_PUSH_DEVICE WITH (ROWLOCK)		SET			MPPS_PUSH_DEVICE.PUSH_ID = MPPS_PUSH_DATA.ID		FROM MPPS_PUSH_DATA WITH (NOLOCK)		WHERE MPPS_PUSH_DEVICE.PUSH_ID=-1 AND MPPS_PUSH_DATA.MSG_UUID=MPPS_PUSH_DEVICE.MSG_UUID 		  AND MPPS_PUSH_DEVICE.SYSTEM_ID=#{SYSTEM_ID} 	</update>    <!-- AND DATEDIFF(S,MPPS_PUSH_DEVICE_PROGRESS.UPT_DT,GETDATE()) > 60        NOT USED     -->    <!-- NOT USED ANY MORE-->    <update id="updatePushDeviceIdInPushProgressStatus" parameterType="String">		UPDATE			MPPS_PUSH_DEVICE_PROGRESS  WITH (ROWLOCK)		SET			MPPS_PUSH_DEVICE_PROGRESS.PUSH_DEVICE_ID = MPPS_PUSH_DEVICE.ID		FROM MPPS_PUSH_DEVICE WITH (NOLOCK)		WHERE MPPS_PUSH_DEVICE_PROGRESS.PUSH_DEVICE_ID=-1 AND  MPPS_PUSH_DEVICE.DEVICE_MSG_UUID=MPPS_PUSH_DEVICE_PROGRESS.DEVICE_MSG_UUID			AND	MPPS_PUSH_DEVICE_PROGRESS.SYSTEM_ID=#{SYSTEM_ID} AND DATEDIFF(S,MPPS_PUSH_DEVICE_PROGRESS.UPT_DT,GETDATE()) > 60	</update>    <!--AND DATEDIFF(S,MPPS_PUSH_DEVICE_SUCCESS.UPT_DT,GETDATE()) > 60        NOT USED    -->    <!-- NOT USED ANY MORE-->    <update id="updatePushDeviceIdInPushSuccessStatus" parameterType="String">		UPDATE			MPPS_PUSH_DEVICE_SUCCESS  WITH (ROWLOCK)		SET			MPPS_PUSH_DEVICE_SUCCESS.PUSH_DEVICE_ID = MPPS_PUSH_DEVICE.ID		FROM MPPS_PUSH_DEVICE WITH (NOLOCK)		WHERE MPPS_PUSH_DEVICE_SUCCESS.PUSH_DEVICE_ID=-1 AND  MPPS_PUSH_DEVICE.DEVICE_MSG_UUID=MPPS_PUSH_DEVICE_SUCCESS.DEVICE_MSG_UUID			AND	MPPS_PUSH_DEVICE_SUCCESS.SYSTEM_ID=#{SYSTEM_ID} AND DATEDIFF(S,MPPS_PUSH_DEVICE_SUCCESS.UPT_DT,GETDATE()) > 60	</update>    <delete id="deletePrivatePushSuccessStatus" parameterType="pushItem">		DELETE FROM MPPS_PUSH_DEVICE_PROGRESS WITH (ROWLOCK)		WHERE DEVICE_MSG_UUID = #{deviceMessageUuid} AND PUSH_TYPE = '01'	</delete>    <delete id="deleteGcmPushSuccessStatus" parameterType="pushItem">		DELETE FROM MPPS_PUSH_DEVICE_PROGRESS WITH (ROWLOCK)  		WHERE DEVICE_MSG_UUID = #{deviceMessageUuid} AND PUSH_TYPE = '03'	</delete>    <delete id="deleteApnsPushSuccessStatus" parameterType="pushItem">		DELETE FROM MPPS_PUSH_DEVICE_PROGRESS WITH (ROWLOCK)  		WHERE DEVICE_MSG_UUID = #{deviceMessageUuid} AND PUSH_TYPE = '02'	</delete>    <select id="checkNotificationMessage" resultType="Boolean" parameterType="map">		SELECT CASE WHEN COUNT(*)  > 0 THEN '1' ELSE '0' END		FROM MPPS_NOTI_MSG WITH (NOLOCK)         WHERE           PPC_PUSH_KEY =  #{PPC_PUSH_KEY}	</select>    <select id="pushKeyExists" resultType="Boolean">		SELECT 	CASE WHEN COUNT(*) > 0 THEN '1'				ELSE '0'				END 		FROM MPPS_PUSH_KEY_MAP WITH (NOLOCK)		WHERE PPC_PUSH_KEY = #{privatePushKey} 	</select>    <select id="checkPushKeyAvailableInServiceName" parameterType="map" resultType="Boolean">		SELECT 	CASE WHEN COUNT(*) > 0 THEN '1'				ELSE '0'				END isExist		FROM MPPS_PUSH_KEY_MAP WITH (NOLOCK)		WHERE PPC_PUSH_KEY = #{privatePushKey} AND PUSH_RECEIVER = #{pushReceiver}	</select>    <select id="checkPushServerExist" resultType="Boolean">		SELECT 	CASE WHEN COUNT(*) > 0 THEN '1' ELSE '0'	END		FROM MPPS_SERVER_INFO WITH (NOLOCK)		WHERE SYSTEM_ID = #{SYSTEM_ID} 	</select>    <select id="getServerRegId" resultType="Long" parameterType="String">		SELECT 	ID		FROM MPPS_SERVER_INFO WITH (NOLOCK)		WHERE SYSTEM_ID = #{SYSTEM_ID} AND STATUS=10	</select>    <select id="getPushKeyMaps" resultType="pushKeyItem">		SELECT 				PUSH_RECEIVER as svcName,				UUID 		  as uuid,				PPC_PUSH_KEY  as privatePushKey,				GCM_PUSH_KEY  as gcmPushKey,				APNS_PUSH_KEY  as apnsPushKey,				PFS_IP_PORT as serverInfo,				LOCALE as locale,				REG_DT as firstCreationDate,				UPT_DT as lastUpdateDate		FROM mPPS_Push_Key_Map WITH (NOLOCK)		WHERE STATUS = 10	</select>    <select id="getPushKeyByDeviceUuid" resultType="pushKeyItem" parameterType="String">		SELECT TOP 1 PUSH_RECEIVER as svcName,			   UUID as uuid,			   PPC_PUSH_KEY as privatePushKey,			   APNS_PUSH_KEY as apnsPushKey,			   GCM_PUSH_KEY as gcmPushKey,			   PFS_IP_PORT as serverInfo,			   LOCALE as locale		FROM MPPS_PUSH_KEY_MAP WITH (NOLOCK)		WHERE UUID = #{deviceUuid}                 ORDER BY UPT_DT DESC	</select>    <select id="getPushKeyByPushKey" resultType="pushKeyItem" parameterType="String">		SELECT PUSH_RECEIVER as svcName,			   UUID as uuid,			   PPC_PUSH_KEY as privatePushKey,			   APNS_PUSH_KEY as apnsPushKey,			   GCM_PUSH_KEY as gcmPushKey,			   PFS_IP_PORT as serverInfo,			   LOCALE as locale		FROM MPPS_PUSH_KEY_MAP WITH (NOLOCK)		WHERE PPC_PUSH_KEY = #{ppcPushKey} 	</select>    <select id="getPublicConfigs" resultType="casemap">		SELECT 	SERVICE.PUSH_RECEIVER as serviceName,				CONFIG.CONFIG_KEY as confKey,				CONFIG.CONFIG_VALUE as confValue,				CONFIG.CONFIG_VALUE_TYPE as confValueType,				CONFIG.REG_DT as firstCreationDate,				CONFIG.LAST_MODIFIER as lastUpdateDate		FROM MPPS_PUBLIC_CONFIG_INFO CONFIG 			 INNER JOIN MPPS_SERVICE_CONFIG_INFO SERVICE ON CONFIG.PUSH_RECEIVER_ID = SERVICE.ID	</select>    <select id="getServiceConfigs" resultType="casemap">		SELECT 	PUSH_RECEIVER as pushReceiver,				APNS_KEY_STORE as apnsKeyStoreData,				APNS_KEY_STORE_PWD as apnsKeyStorePassword,				APNS_KEY_STORE_PROD_YN as apnsKeyStoreProduction,				GCM_API_KEY as gcmApiKey		FROM MPPS_SERVICE_CONFIG_INFO SERVICE	</select>    <select id="getApnsKeyStore" resultType="casemap">		SELECT  PUSH_RECEIVER as pushReceiver,				APNS_KEY_STORE as apnsKeyStoreData,				APNS_KEY_STORE_PWD as apnsKeyStorePassword,				APNS_KEY_STORE_PROD_YN as apnsKeyStoreProduction,				GCM_API_KEY as gcmApiKey		FROM MPPS_SERVICE_CONFIG_INFO SERVICE		WHERE PUSH_RECEIVER = #{pushReceiver}	</select>    <select id="getNotificationConfig" resultType="casemap">		SELECT 	NOTI_ACT_INTERVAL,				NOTI_CONFIG_TIME,				NOTI_ACT_YN		FROM MPPS_NOTI_CONFIG WITH (NOLOCK)	</select>    <select id="getAuthValues" resultType="authValues">		SELECT 	L.LICENSE_KEY as licenseKey,				L.LICENSE as encryptedAuth		FROM MPPS_SERVICE_CONFIG_INFO S		INNER JOIN MPPS_PUSH_LICENSE L ON S.ID = L.ID AND L.STATUS = 10	</select>    <!-- MPPS_PUSH_DATA DATA WITH (NOLOCK)            INNER JOIN MPPS_PUSH_DEVICE DEVICE WITH (NOLOCK) ON DATA.ID= DEVICE.PUSH_ID            LEFT OUTER JOIN MPPS_PUSH_DEVICE_PROGRESS P WITH (NOLOCK) ON DEVICE.ID = P.PUSH_DEVICE_ID AND P.PUSH_TYPE = 1            LEFT OUTER JOIN MPPS_PUSH_DEVICE_SUCCESS S WITH (NOLOCK) ON DEVICE.ID = S.PUSH_DEVICE_ID AND S.PUSH_TYPE = 1 -->    <!-- MPPS_PUSH_DATA DATA WITH (NOLOCK)            INNER JOIN MPPS_PUSH_DEVICE DEVICE WITH (NOLOCK) ON DATA.MSG_UUID= DEVICE.MSG_UUID            LEFT OUTER JOIN MPPS_PUSH_DEVICE_PROGRESS P WITH (NOLOCK) ON DEVICE.DEVICE_MSG_UUID = P.DEVICE_MSG_UUID AND P.PUSH_TYPE = 1            LEFT OUTER JOIN MPPS_PUSH_DEVICE_SUCCESS S WITH (NOLOCK) ON DEVICE.DEVICE_MSG_UUID = S.DEVICE_MSG_UUID AND S.PUSH_TYPE = 1 -->    <!-- MPPS_PUSH_DATA DATA WITH (NOLOCK)              INNER JOIN MPPS_PUSH_DEVICE DEVICE WITH (NOLOCK) ON DATA.SYSTEM_ID=DEVICE.SYSTEM_ID AND DATA.PUSH_ID= DEVICE.PUSH_ID              LEFT OUTER JOIN MPPS_PUSH_DEVICE_PROGRESS P WITH (NOLOCK) ON P.PUSH_TYPE = 1 AND DEVICE.SYSTEM_ID=P.SYSTEM_ID AND DEVICE.PUSH_DEVICE_ID=P.PUSH_DEVICE_ID              LEFT OUTER JOIN MPPS_PUSH_DEVICE_SUCCESS S WITH (NOLOCK) ON S.PUSH_TYPE = 1 AND DEVICE.SYSTEM_ID = S.SYSTEM_ID AND DEVICE.PUSH_DEVICE_ID=S.PUSH_DEVICE_ID -->    <select id="getPpcItemListNotYetMovedToOtherServerByPushKey" resultType="pushItem" parameterType="map">		SELECT 				DEVICE.id ,			DEVICE.SYSTEM_ID as systemId,			DATA.PUSH_GROUP_ID as pushGroupId,			DATA.PUSH_ID as pushDataId,			DEVICE.PUSH_DEVICE_ID as pushDeviceId,			DEVICE.MSG_UUID AS messageUuid,			DEVICE.DEVICE_MSG_UUID AS deviceMessageUuid,			DATA.PUSH_GROUP_KEY AS pushGroupKey,			DATA.PUSH_RECEIVER pushReceiver,			DEVICE.PPC_PUSH_KEY AS ppcPushKey,			DEVICE.PPC_SEND_YN AS toPpc,			DATA.PAYLOAD AS payload,			P.STATUS AS ppcPushStatus,			DATA.PPC_BROADCAST_ACT_NM ppcBroadcastAction,			DATA.PPC_APP_NM ppcApplicationName,			DATA.PPC_PACKAGE_NM ppcApplicationPackageName,			DATA.PPC_MODE AS ppcMode,			1 as inserted,			1 as fromActivemq,			0 as ppcProgressInserted,			DATA.REG_DT AS firstCreationDate,			P.UPT_DT AS lastUpdateDate		FROM  MPPS_PUSH_DATA DATA WITH (NOLOCK)		      INNER JOIN MPPS_PUSH_DEVICE DEVICE WITH (NOLOCK) ON DATA.SYSTEM_ID=DEVICE.SYSTEM_ID AND DATA.PUSH_ID= DEVICE.PUSH_ID 		      LEFT OUTER JOIN MPPS_PUSH_DEVICE_PROGRESS P WITH (NOLOCK) ON P.PUSH_TYPE = 1 AND DEVICE.SYSTEM_ID=P.SYSTEM_ID AND DEVICE.PUSH_DEVICE_ID=P.PUSH_DEVICE_ID		      LEFT OUTER JOIN MPPS_PUSH_DEVICE_SUCCESS S WITH (NOLOCK) ON S.PUSH_TYPE = 1 AND DEVICE.SYSTEM_ID = S.SYSTEM_ID AND DEVICE.PUSH_DEVICE_ID=S.PUSH_DEVICE_ID		WHERE DEVICE.PPC_SEND_YN='Y' 			AND DEVICE.PPC_PUSH_KEY = #{ppcPushKey}			<![CDATA[			AND DEVICE.REG_DT >= GETDATE()-#{pushDataValidPeriod}			]]>			AND DATA.PPC_MODE=0			AND P.STATUS IS NULL			AND S.STATUS IS NULL			ORDER BY DEVICE.ID ASC	</select>    <!--MPPS_PUSH_DATA DATA WITH (NOLOCK)            INNER JOIN MPPS_PUSH_DEVICE DEVICE WITH (NOLOCK) ON DATA.ID= DEVICE.PUSH_ID            INNER JOIN MPPS_PUSH_DEVICE_PROGRESS P WITH (NOLOCK) ON DEVICE.ID = P.PUSH_DEVICE_ID AND PUSH_TYPE = 1            LEFT OUTER JOIN MPPS_PUSH_DEVICE_ITF ITF WITH(NOLOCK)ON DEVICE.ID = ITF.PUSH_DEVICE_ID AND ITF."STATUS" IN (2000,5555)  -->    <!--MPPS_PUSH_DATA DATA WITH (NOLOCK)            INNER JOIN MPPS_PUSH_DEVICE DEVICE WITH (NOLOCK) ON DATA.MSG_UUID= DEVICE.MSG_UUID            INNER JOIN MPPS_PUSH_DEVICE_PROGRESS P WITH (NOLOCK) ON DEVICE.DEVICE_MSG_UUID = P.DEVICE_MSG_UUID AND PUSH_TYPE = 1            LEFT OUTER JOIN MPPS_PUSH_DEVICE_ITF ITF WITH(NOLOCK)ON DEVICE.DEVICE_MSG_UUID = ITF.DEVICE_MSG_UUID AND ITF."STATUS" IN (2000,5555)  -->    <!--	MPPS_PUSH_DATA DATA WITH (NOLOCK)             INNER JOIN MPPS_PUSH_DEVICE DEVICE WITH (NOLOCK) ON DATA.SYSTEM_ID=DEVICE.SYSTEM_ID AND DATA.PUSH_ID= DEVICE.PUSH_ID             INNER JOIN MPPS_PUSH_DEVICE_PROGRESS P WITH (NOLOCK) ON P.PUSH_TYPE = 1 AND DEVICE.SYSTEM_ID=P.SYSTEM_ID AND DEVICE.PUSH_DEVICE_ID=P.PUSH_DEVICE_ID             LEFT OUTER JOIN MPPS_PUSH_DEVICE_ITF ITF WITH(NOLOCK)ON DEVICE.PUSH_DEVICE_ID = ITF.PUSH_DEVICE_ID AND ITF."STATUS" IN (2000,5555)    -->    <select id="getPpcItemListByPushKey" resultType="pushItem" parameterType="map">        {call sp_getPpcItemListByPushKey (#{pageSize}, #{ppcPushKey}, #{pushDataValidPeriod}, #{lastDeviceId}) }        <!--		SELECT                    TOP ${pageSize}                    DEVICE.id ,                    DEVICE.SYSTEM_ID as systemId,                    DATA.PUSH_GROUP_ID as pushGroupId,                    DATA.PUSH_ID as pushDataId,                    DEVICE.PUSH_DEVICE_ID as pushDeviceId,                    DEVICE.MSG_UUID AS messageUuid,                    DEVICE.DEVICE_MSG_UUID AS deviceMessageUuid,                    DATA.PUSH_GROUP_KEY AS pushGroupKey,                    DATA.PUSH_RECEIVER pushReceiver,                    DEVICE.PPC_PUSH_KEY AS ppcPushKey,                    DEVICE.PPC_SEND_YN AS toPpc,                    DATA.PAYLOAD AS payload,                    P.STATUS AS ppcPushStatus,                    DATA.PPC_BROADCAST_ACT_NM ppcBroadcastAction,                    DATA.PPC_APP_NM ppcApplicationName,                    DATA.PPC_PACKAGE_NM ppcApplicationPackageName,                    DATA.PPC_MODE AS ppcMode,                    1 as inserted,                    1 as ppcProgressInserted,                    DATA.REG_DT AS firstCreationDate,                    P.UPT_DT AS lastUpdateDate                FROM MPPS_PUSH_DATA DATA WITH (NOLOCK)                    INNER JOIN MPPS_PUSH_DEVICE DEVICE WITH (NOLOCK) ON DATA.SYSTEM_ID=DEVICE.SYSTEM_ID AND DATA.PUSH_ID= DEVICE.PUSH_ID                    INNER JOIN MPPS_PUSH_DEVICE_PROGRESS P WITH (NOLOCK) ON P.PUSH_TYPE = 1 AND DEVICE.SYSTEM_ID=P.SYSTEM_ID AND DEVICE.PUSH_DEVICE_ID=P.PUSH_DEVICE_ID                    LEFT OUTER JOIN MPPS_PUSH_DEVICE_ITF ITF WITH(NOLOCK)ON DEVICE.PUSH_DEVICE_ID = ITF.PUSH_DEVICE_ID                WHERE DEVICE.PPC_SEND_YN='Y'                    AND	DEVICE.PPC_PUSH_KEY = #{ppcPushKey}                    AND DEVICE.REG_DT &lt;= GETDATE()-#{pushDataValidPeriod}                    AND P."STATUS" IN (1001, 1002,1005,1006, 1009,1011, 1999,9997)                    AND DEVICE.id &lt; #{lastDeviceId}                    AND DATA.PPC_MODE=0                    AND (ITF."STATUS" IS NULL OR ITF."STATUS" NOT IN (2000,5555))                    ORDER BY DEVICE.ID ASC        -->    </select>    <!--   MPPS_PUSH_DATA DATA WITH (NOLOCK)            INNER JOIN MPPS_PUSH_DEVICE DEVICE WITH (NOLOCK) ON DATA.ID= DEVICE.PUSH_ID            INNER JOIN MPPS_PUSH_DEVICE_PROGRESS P WITH (NOLOCK) ON DEVICE.PUSH_ID = P.PUSH_DEVICE_ID AND PUSH_TYPE = 1            LEFT OUTER JOIN MPPS_PUSH_DEVICE_ITF ITF WITH(NOLOCK)ON DEVICE.PUSH_ID = ITF.PUSH_DEVICE_ID AND ITF."STATUS" IN (2000,5555)-->    <!--  MPPS_PUSH_DATA DATA WITH (NOLOCK)            INNER JOIN MPPS_PUSH_DEVICE DEVICE WITH (NOLOCK) ON DATA.MSG_UUID= DEVICE.MSG_UUID            INNER JOIN MPPS_PUSH_DEVICE_PROGRESS P WITH (NOLOCK) ON DEVICE.DEVICE_MSG_UUID = P.DEVICE_MSG_UUID AND PUSH_TYPE = 1            LEFT OUTER JOIN MPPS_PUSH_DEVICE_ITF ITF WITH(NOLOCK)ON DEVICE.DEVICE_MSG_UUID = ITF.DEVICE_MSG_UUID AND ITF."STATUS" IN (2000,5555)-->    <!--MPPS_PUSH_DATA DATA WITH (NOLOCK)            INNER JOIN MPPS_PUSH_DEVICE DEVICE WITH (NOLOCK) ON DATA.SYSTEM_ID=DEVICE.SYSTEM_ID AND DATA.PUSH_ID= DEVICE.PUSH_ID            INNER JOIN MPPS_PUSH_DEVICE_PROGRESS P WITH (NOLOCK) ON P.PUSH_TYPE = 1 AND DEVICE.SYSTEM_ID=P.SYSTEM_ID AND DEVICE.PUSH_DEVICE_ID=P.PUSH_DEVICE_ID            LEFT OUTER JOIN MPPS_PUSH_DEVICE_ITF ITF WITH(NOLOCK)ON DEVICE.PUSH_DEVICE_ID = ITF.PUSH_DEVICE_ID AND ITF."STATUS" IN (2000,5555) -->    <select id="getPushItemSizeByPushKey" resultType="pushItemSearch" parameterType="map">		SELECT 				COUNT(*) as totalSize,			COUNT(*)/ ${pageSize} as pagingCount		FROM MPPS_PUSH_DATA DATA WITH (NOLOCK)		    INNER JOIN MPPS_PUSH_DEVICE DEVICE WITH (NOLOCK) ON DATA.SYSTEM_ID=DEVICE.SYSTEM_ID AND DATA.PUSH_ID= DEVICE.PUSH_ID 		    INNER JOIN MPPS_PUSH_DEVICE_PROGRESS P WITH (NOLOCK) ON P.PUSH_TYPE = 1 AND DEVICE.SYSTEM_ID=P.SYSTEM_ID AND DEVICE.PUSH_DEVICE_ID=P.PUSH_DEVICE_ID		    LEFT OUTER JOIN MPPS_PUSH_DEVICE_SUCCESS(NOLOCK) S ON S.DEVICE_MSG_UUID=P.DEVICE_MSG_UUID		    LEFT OUTER JOIN MPPS_PUSH_DEVICE_ITF ITF WITH(NOLOCK)ON DEVICE.PUSH_DEVICE_ID = ITF.PUSH_DEVICE_ID		WHERE DEVICE.PPC_SEND_YN='Y'    			<![CDATA[   			AND DEVICE.REG_DT >= GETDATE()-#{pushDataValidPeriod}   			]]>			AND	DEVICE.PPC_PUSH_KEY = #{ppcPushKey}			AND S.DEVICE_MSG_UUID IS NULL			AND P."STATUS" IN (1001, 1002,1005,1006, 1009,1011, 1999,9997) 			AND DATA.PPC_MODE=0			AND (ITF.STATUS IS NULL OR ITF.STATUS NOT IN (2000,5555))	</select>    <!--MPPS_PUSH_DATA DATA WITH (NOLOCK)            INNER JOIN MPPS_PUSH_DEVICE DEVICE WITH (NOLOCK) ON DATA.ID= DEVICE.PUSH_ID            INNER JOIN MPPS_PUSH_DEVICE_PROGRESS P WITH (NOLOCK) ON DEVICE.ID = P.PUSH_DEVICE_ID AND PUSH_TYPE = 1            LEFT OUTER JOIN MPPS_PUSH_DEVICE_ITF ITF WITH(NOLOCK)ON DEVICE.ID = ITF.PUSH_DEVICE_ID AND ITF."STATUS" IN (2000,5555) -->    <!--MPPS_PUSH_DATA DATA WITH (NOLOCK)		    INNER JOIN MPPS_PUSH_DEVICE DEVICE WITH (NOLOCK) ON DATA.MSG_UUID= DEVICE.MSG_UUID		    INNER JOIN MPPS_PUSH_DEVICE_PROGRESS P WITH (NOLOCK) ON DEVICE.DEVICE_MSG_UUID = P.DEVICE_MSG_UUID AND PUSH_TYPE = 1		    LEFT OUTER JOIN MPPS_PUSH_DEVICE_ITF ITF WITH(NOLOCK)ON DEVICE.DEVICE_MSG_UUID = ITF.DEVICE_MSG_UUID AND ITF."STATUS" IN (2000,5555) -->    <!--MPPS_PUSH_DATA DATA WITH (NOLOCK)            INNER JOIN MPPS_PUSH_DEVICE DEVICE WITH (NOLOCK) ON DATA.SYSTEM_ID=DEVICE.SYSTEM_ID AND DATA.PUSH_ID= DEVICE.PUSH_ID            INNER JOIN MPPS_PUSH_DEVICE_PROGRESS P WITH (NOLOCK) ON P.PUSH_TYPE = 1 AND DEVICE.SYSTEM_ID=P.SYSTEM_ID AND DEVICE.PUSH_DEVICE_ID=P.PUSH_DEVICE_ID            LEFT OUTER JOIN MPPS_PUSH_DEVICE_ITF ITF WITH(NOLOCK)ON DEVICE.PUSH_DEVICE_ID = ITF.PUSH_DEVICE_ID AND ITF."STATUS" IN (2000,5555)    -->    <!-- NOT USED ANY MORE-->    <select id="getPpcItemListByPushKeyWithMap" resultType="pushItem" parameterType="map">        SELECT        TOP ${pageSize}        DEVICE.id ,        DEVICE.SYSTEM_ID as systemId,        DATA.PUSH_GROUP_ID as pushGroupId,        DATA.PUSH_ID as pushDataId,        DEVICE.PUSH_DEVICE_ID as pushDeviceId,        DEVICE.MSG_UUID AS messageUuid,        DEVICE.DEVICE_MSG_UUID AS deviceMessageUuid,        DATA.PUSH_GROUP_KEY AS pushGroupKey,        DATA.PUSH_RECEIVER pushReceiver,        DEVICE.PPC_PUSH_KEY AS ppcPushKey,        DEVICE.PPC_SEND_YN AS toPpc,        DATA.PAYLOAD AS payload,        P.STATUS AS ppcPushStatus,        DATA.PPC_BROADCAST_ACT_NM ppcBroadcastAction,        DATA.PPC_APP_NM ppcApplicationName,        DATA.PPC_PACKAGE_NM ppcApplicationPackageName,        DATA.PPC_MODE AS ppcMode,        1 as inserted,        1 as ppcProgressInserted,        DATA.REG_DT AS firstCreationDate,        P.UPT_DT AS lastUpdateDate        FROM MPPS_PUSH_DATA DATA WITH (NOLOCK)        INNER JOIN MPPS_PUSH_DEVICE DEVICE WITH (NOLOCK) ON DATA.SYSTEM_ID=DEVICE.SYSTEM_ID AND DATA.PUSH_ID=        DEVICE.PUSH_ID        INNER JOIN MPPS_PUSH_DEVICE_PROGRESS P WITH (NOLOCK) ON P.PUSH_TYPE = 1 AND DEVICE.SYSTEM_ID=P.SYSTEM_ID AND        DEVICE.PUSH_DEVICE_ID=P.PUSH_DEVICE_ID        LEFT OUTER JOIN MPPS_PUSH_DEVICE_SUCCESS(NOLOCK) S ON S.DEVICE_MSG_UUID=P.DEVICE_MSG_UUID        LEFT OUTER JOIN MPPS_PUSH_DEVICE_ITF ITF WITH(NOLOCK)ON DEVICE.PUSH_DEVICE_ID = ITF.PUSH_DEVICE_ID        WHERE DEVICE.PPC_SEND_YN='Y'        AND DEVICE.PPC_PUSH_KEY = #{ppcPushKey}        AND S.DEVICE_MSG_UUID IS NULL        <![CDATA[		   AND DEVICE.REG_DT>=GETDATE()-#{pushDataValidPeriod}		   ]]>        <if test="DEVICE_MESSAGE_UUIDS != null and DEVICE_MESSAGE_UUIDS.size()>0">            AND DEVICE.DEVICE_MSG_UUID NOT IN            <foreach item="items" index="index" collection="DEVICE_MESSAGE_UUIDS" open="(" separator="," close=")">                #{items}            </foreach>        </if>        AND P."STATUS" IN (1001, 1002,1005,1006, 1009,1011, 1999,9997)        AND DATA.PPC_MODE=0        AND (ITF.STATUS IS NULL OR ITF.STATUS NOT IN (2000,5555))        AND DEVICE.id > #{lastDeviceId}        ORDER BY DATA.REG_DT ASC    </select>    <select id="getDeviceInfo" resultType="deviceInfo" parameterType="String">			SELECT 			    TOP 1 				CASE WHEN a.devceOsType ='I' THEN B.apnsPushKey 					 WHEN a.devceOsType ='A' THEN B.gcmPushKey					 ELSE ''				 END AS pushKey 				 ,B.pcPushKey				 ,A.devceOsType AS deviceType                 			FROM 			 pms.mPMS_USER_DEVICE10 A			,pms.mPMS_PUSH_KEY_INFO B			WHERE				A.regiStusDstcd ='10' 				AND A.userDevceIdnfr = B.userDevceIdnfr				AND B.pcPushKey =#{pushKey}           ORDER BY lastModfiDt DESC							</select>    <!--MPPS_PUSH_DEVICE D  WITH (NOLOCK)            LEFT OUTER JOIN MPPS_PUSH_DEVICE_PROGRESS P  WITH (NOLOCK) ON D.DEVICE_MSG_UUID = P.DEVICE_MSG_UUID            LEFT OUTER JOIN MPPS_PUSH_DEVICE_SUCCESS S  WITH (NOLOCK) ON D.DEVICE_MSG_UUID = S.DEVICE_MSG_UUID -->    <select id="getPushStatus" resultType="pushItem" parameterType="String">		SELECT				CASE WHEN S.PUSH_TYPE =	'01' THEN S.STATUS ELSE CASE WHEN P.PUSH_TYPE='01' THEN P.STATUS ELSE 9999 END END  ppcPushStatus			,CASE WHEN S.PUSH_TYPE =	'02' THEN S.STATUS ELSE CASE WHEN P.PUSH_TYPE='02' THEN P.STATUS ELSE 9999 END END AS apnsPushStatus			,CASE WHEN S.PUSH_TYPE =	'03' THEN S.STATUS ELSE CASE WHEN P.PUSH_TYPE='03' THEN P.STATUS ELSE 9999 END END AS gcmPushStatus					FROM MPPS_PUSH_DEVICE D  WITH (NOLOCK) 			LEFT OUTER JOIN MPPS_PUSH_DEVICE_PROGRESS P  WITH (NOLOCK) ON D.SYSTEM_ID = P.SYSTEM_ID AND D.PUSH_DEVICE_ID = P.PUSH_DEVICE_ID			LEFT OUTER JOIN MPPS_PUSH_DEVICE_SUCCESS S  WITH (NOLOCK) ON D.SYSTEM_ID = S.SYSTEM_ID AND D.PUSH_DEVICE_ID = S.PUSH_DEVICE_ID		WHERE D.DEVICE_MSG_UUID = #{deviceMessageUuid}	</select>    <!--MPPS_PUSH_DEVICE D  WITH (NOLOCK)            LEFT OUTER JOIN MPPS_PUSH_DEVICE_PROGRESS P  WITH (NOLOCK) ON D.DEVICE_MSG_UUID = P.DEVICE_MSG_UUID            LEFT OUTER JOIN MPPS_PUSH_DEVICE_SUCCESS S  WITH (NOLOCK) ON D.DEVICE_MSG_UUID = S.DEVICE_MSG_UUID -->    <select id="getPushPpcStatus" resultType="pushItem" parameterType="String">		SELECT				CASE WHEN S.PUSH_TYPE =	'01' THEN S.STATUS ELSE CASE WHEN P.PUSH_TYPE='01' THEN P.STATUS ELSE 9999 END END  ppcPushStatus					FROM MPPS_PUSH_DEVICE D  WITH (NOLOCK) 			LEFT OUTER JOIN MPPS_PUSH_DEVICE_PROGRESS P  WITH (NOLOCK) ON D.SYSTEM_ID = P.SYSTEM_ID AND D.PUSH_DEVICE_ID = P.PUSH_DEVICE_ID			LEFT OUTER JOIN MPPS_PUSH_DEVICE_SUCCESS S  WITH (NOLOCK) ON D.SYSTEM_ID = S.SYSTEM_ID AND D.PUSH_DEVICE_ID = S.PUSH_DEVICE_ID		WHERE D.DEVICE_MSG_UUID = #{deviceMessageUuid}	</select>    <!--MPPS_PUSH_DEVICE D  WITH (NOLOCK)            LEFT OUTER JOIN MPPS_PUSH_DEVICE_PROGRESS P  WITH (NOLOCK) ON D.DEVICE_MSG_UUID = P.DEVICE_MSG_UUID            LEFT OUTER JOIN MPPS_PUSH_DEVICE_SUCCESS S  WITH (NOLOCK) ON D.DEVICE_MSG_UUID = S.DEVICE_MSG_UUID -->    <select id="getPushGcmStatus" resultType="pushItem" parameterType="String">		SELECT				CASE WHEN S.PUSH_TYPE =	'03' THEN S.STATUS ELSE CASE WHEN P.PUSH_TYPE='03' THEN P.STATUS ELSE 9999 END END AS gcmPushStatus		FROM MPPS_PUSH_DEVICE D  WITH (NOLOCK) 			LEFT OUTER JOIN MPPS_PUSH_DEVICE_PROGRESS P  WITH (NOLOCK) ON D.SYSTEM_ID = P.SYSTEM_ID AND D.PUSH_DEVICE_ID = P.PUSH_DEVICE_ID			LEFT OUTER JOIN MPPS_PUSH_DEVICE_SUCCESS S  WITH (NOLOCK) ON D.SYSTEM_ID = S.SYSTEM_ID AND D.PUSH_DEVICE_ID = S.PUSH_DEVICE_ID		WHERE D.DEVICE_MSG_UUID = #{deviceMessageUuid}	</select>    <!--MPPS_PUSH_DEVICE D  WITH (NOLOCK)            LEFT OUTER JOIN MPPS_PUSH_DEVICE_PROGRESS P  WITH (NOLOCK) ON D.DEVICE_MSG_UUID = P.DEVICE_MSG_UUID            LEFT OUTER JOIN MPPS_PUSH_DEVICE_SUCCESS S  WITH (NOLOCK) ON D.DEVICE_MSG_UUID = S.DEVICE_MSG_UUID -->    <select id="getPushApnsStatus" resultType="pushItem" parameterType="String">		SELECT				CASE WHEN S.PUSH_TYPE =	'02' THEN S.STATUS ELSE CASE WHEN P.PUSH_TYPE='02' THEN P.STATUS ELSE 9999 END END  apnsPushStatus					FROM  MPPS_PUSH_DEVICE D  WITH (NOLOCK) 			  LEFT OUTER JOIN MPPS_PUSH_DEVICE_PROGRESS P  WITH (NOLOCK) ON D.SYSTEM_ID = P.SYSTEM_ID AND D.PUSH_DEVICE_ID = P.PUSH_DEVICE_ID			  LEFT OUTER JOIN MPPS_PUSH_DEVICE_SUCCESS S  WITH (NOLOCK) ON D.SYSTEM_ID = S.SYSTEM_ID AND D.PUSH_DEVICE_ID = S.PUSH_DEVICE_ID		WHERE D.DEVICE_MSG_UUID = #{deviceMessageUuid}	</select>    <select id="getPushStatusWithPushGroupKey" resultType="pushItem" parameterType="String">		SELECT				CASE WHEN S.PUSH_TYPE =	'01' THEN S.STATUS ELSE CASE WHEN P.PUSH_TYPE='01' THEN P.STATUS ELSE 9999 END END  ppcPushStatus			,CASE WHEN S.PUSH_TYPE =	'02' THEN S.STATUS ELSE CASE WHEN P.PUSH_TYPE='02' THEN P.STATUS ELSE 9999 END END AS apnsPushStatus			,CASE WHEN S.PUSH_TYPE =	'03' THEN S.STATUS ELSE CASE WHEN P.PUSH_TYPE='03' THEN P.STATUS ELSE 9999 END END AS gcmPushStatus			,DEVICE.DEVICE_MSG_UUID AS deviceMessageUuid		FROM		MPPS_PUSH_DATA DATA  WITH (NOLOCK)		    INNER JOIN MPPS_PUSH_DEVICE DEVICE WITH (NOLOCK) ON DATA.SYSTEM_ID=DEVICE.SYSTEM_ID AND DATA.PUSH_ID= DEVICE.PUSH_ID			LEFT OUTER JOIN MPPS_PUSH_DEVICE_PROGRESS P  WITH (NOLOCK) ON DEVICE.SYSTEM_ID = P.SYSTEM_ID AND DEVICE.PUSH_DEVICE_ID = P.PUSH_DEVICE_ID			LEFT OUTER JOIN MPPS_PUSH_DEVICE_SUCCESS S  WITH (NOLOCK) ON DEVICE.SYSTEM_ID = S.SYSTEM_ID AND DEVICE.PUSH_DEVICE_ID = S.PUSH_DEVICE_ID		WHERE DATA.PUSH_GROUP_KEY=#{pushGroupKey}	</select>    <select id="getPushStatusByMessageUuids" resultType="pushItem">        SELECT        CASE WHEN S.PUSH_TYPE = '01' THEN S.STATUS ELSE CASE WHEN P.PUSH_TYPE='01' THEN P.STATUS ELSE 9999 END END        ppcPushStatus        ,CASE WHEN S.PUSH_TYPE = '02' THEN S.STATUS ELSE CASE WHEN P.PUSH_TYPE='02' THEN P.STATUS ELSE 9999 END END AS        apnsPushStatus        ,CASE WHEN S.PUSH_TYPE = '03' THEN S.STATUS ELSE CASE WHEN P.PUSH_TYPE='03' THEN P.STATUS ELSE 9999 END END AS        gcmPushStatus        ,DEVICE.DEVICE_MSG_UUID AS deviceMessageUuid        FROM        MPPS_PUSH_DATA DATA WITH (NOLOCK)        INNER JOIN MPPS_PUSH_DEVICE DEVICE WITH (NOLOCK) ON DATA.SYSTEM_ID=DEVICE.SYSTEM_ID AND DATA.PUSH_ID=        DEVICE.PUSH_ID        LEFT OUTER JOIN MPPS_PUSH_DEVICE_PROGRESS P WITH (NOLOCK) ON DEVICE.SYSTEM_ID = P.SYSTEM_ID AND        DEVICE.PUSH_DEVICE_ID = P.PUSH_DEVICE_ID        LEFT OUTER JOIN MPPS_PUSH_DEVICE_SUCCESS S WITH (NOLOCK) ON DEVICE.SYSTEM_ID = S.SYSTEM_ID AND        DEVICE.PUSH_DEVICE_ID = S.PUSH_DEVICE_ID        WHERE DEVICE.DEVICE_MSG_UUID IN        <foreach item="deviceMessageUuids" index="index" collection="list" open="(" separator="," close=")">            #{deviceMessageUuids}        </foreach>    </select>    <select id="getFeedbackCount" resultType="int" parameterType="map">		SELECT count(*) AS count		FROM MPPS_FEEDBACK_INFO		WHERE PUSH_RECEIVER = #{pushReceiver}		AND TYPE = #{type}		AND PUSH_KEY = #{pushKey} 		AND CONVERT(VARCHAR(10),REG_DT,120)  = CONVERT(VARCHAR(10),UPT_DT,120) 	</select>    <insert id="insertFeedback" parameterType="map">		INSERT INTO MPPS_FEEDBACK_INFO           (PUSH_RECEIVER           ,PUSH_RECEIVER           ,PUSH_KEY           ,CUMULATIVE_CNT           )     	VALUES           (#{pushReceiver}           ,#{type}           ,#{pushKey}           ,1           )	</insert>    <update id="updateFeedback" parameterType="map">		UPDATE MPPS_FEEDBACK_INFO 		SET 			CUMULATIVE_CNT = ISNULL(CUMULATIVE_CNT,0) +1			,UPT_DT = getdate()		WHERE PUSH_KEY = #{pushKey}	</update>    <!--SELECT                userDevceIdnfr               ,serno               ,curStatus               ,relatedKey               ,lastUpdate               ,lastWorker            FROM pms.mPMS_DEVICE_LOG00            WHERE DATEDIFF(MI,lastUpdate,GETDATE())< 10 AND relatedKey IS NOT NULL AND curStatus='30' -->    <select id="getDeviceHistoryLog" resultType="deviceHistoryLog">		<![CDATA[			SELECT 				userDevceIdnfr			   ,serno			   ,curStatus			   ,relatedKey			   ,lastUpdate			   ,lastWorker			FROM pms.mPMS_DEVICE_LOG00			WHERE DATEDIFF(MI,lastUpdate,GETDATE())< 10 AND relatedKey IS NOT NULL AND curStatus='30'        ]]>	</select>    <delete id="deleteFeedback" parameterType="map">		DELETE FROM MPPS_FEEDBACK_INFO WHERE PUSH_KEY = #{pushKey}	</delete>    <!-- From yesterday to current -->    <select id="getDeviceUsedCntByServiceName" resultType="map" parameterType="map">		SELECT 			PUSH_RECEIVER			,COUNT(*) AS DEVICE_CNT		FROM MPPS_PUSH_KEY_MAP WITH (NOLOCK)		WHERE 			UPT_DT BETWEEN GETDATE()-1 AND GETDATE()			AND STATUS=10		GROUP BY PUSH_RECEIVER	</select>    <!-- MPPS_PUSH_GROUP G WITH (NOLOCK)            INNER JOIN MPPS_PUSH_DATA DATA WITH (NOLOCK) ON G.ID  = DATA.PUSH_GROUP_ID            INNER JOIN MPPS_PUSH_DEVICE DEVICE WITH (NOLOCK) ON DATA.ID= DEVICE.PUSH_ID            INNER JOIN MPPS_PUSH_DEVICE_PROGRESS P WITH (NOLOCK) ON DEVICE.ID = P.PUSH_DEVICE_ID AND PUSH_TYPE = 1 -->    <!--MPPS_PUSH_GROUP G WITH (NOLOCK)            INNER JOIN MPPS_PUSH_DATA DATA WITH (NOLOCK) ON G.PUSH_GROUP_KEY  = DATA.PUSH_GROUP_KEY            INNER JOIN MPPS_PUSH_DEVICE DEVICE WITH (NOLOCK) ON DATA.MSG_UUID= DEVICE.MSG_UUID            INNER JOIN MPPS_PUSH_DEVICE_PROGRESS P WITH (NOLOCK) ON DEVICE.DEVICE_MSG_UUID = P.DEVICE_MSG_UUID AND PUSH_TYPE = 1 -->    <select id="getPushItem" resultType="pushItem">		SELECT 				DEVICE.id ,			DEVICE.SYSTEM_ID as systemId,			DATA.PUSH_GROUP_ID as pushGroupId,			DATA.PUSH_ID as pushDataId,			DEVICE.PUSH_DEVICE_ID as pushDeviceId,			DEVICE.MSG_UUID AS messageUuid,			DEVICE.DEVICE_MSG_UUID AS deviceMessageUuid,			DATA.PUSH_GROUP_KEY AS pushGroupKey,			DATA.PUSH_RECEIVER pushReceiver,			DEVICE.PPC_PUSH_KEY AS ppcPushKey,			DEVICE.PPC_SEND_YN AS toPpc,			DATA.PAYLOAD AS payload,			P.STATUS AS ppcPushStatus,			DATA.PPC_BROADCAST_ACT_NM ppcBroadcastAction,			DATA.PPC_APP_NM ppcApplicationName,			DATA.PPC_PACKAGE_NM ppcApplicationPackageName,			DATA.PPC_MODE AS ppcMode,			DATA.REG_DT AS firstCreationDate,			P.UPT_DT AS lastUpdateDate		FROM 			MPPS_PUSH_DATA DATA WITH (NOLOCK)		    INNER JOIN MPPS_PUSH_DEVICE DEVICE WITH (NOLOCK) ON DATA.SYSTEM_ID=DEVICE.SYSTEM_ID AND DATA.PUSH_ID= DEVICE.PUSH_ID 		    INNER JOIN MPPS_PUSH_DEVICE_PROGRESS P WITH (NOLOCK) ON P.PUSH_TYPE = 1 AND DEVICE.SYSTEM_ID=P.SYSTEM_ID AND DEVICE.PUSH_DEVICE_ID=P.PUSH_DEVICE_ID		WHERE DEVICE.PPC_SEND_YN='Y' 			AND DEVICE.DEVICE_MSG_UUID = #{deviceMessageUuid}			AND DATA.PPC_MODE=0			ORDER BY DATA.REG_DT ASC	</select>    <select id="getMaxIdentityOfPushGroupId" resultType="Long" parameterType="Integer">		SELECT 			ISNULL(Max(PUSH_GROUP_ID),0)+1 AS MAX_PUSH_GROUP_ID		FROM MPPS_PUSH_GROUP WITH (NOLOCK)		WHERE SYSTEM_ID = #{SYSTEM_ID}	</select>    <select id="getMaxIdentityOfPushDataId" resultType="Long" parameterType="Integer">		SELECT 			ISNULL(Max(PUSH_ID),0)+1 AS MAX_PUSH_ID		FROM MPPS_PUSH_DATA WITH (NOLOCK)		WHERE SYSTEM_ID = #{SYSTEM_ID}	</select>    <select id="getMaxIdentityOfPushDeviceId" resultType="Long" parameterType="Integer">		SELECT 			ISNULL(Max(PUSH_DEVICE_ID),0)+1 AS MAX_PUSH_GROUP_ID		FROM MPPS_PUSH_DEVICE WITH (NOLOCK)		WHERE SYSTEM_ID = #{SYSTEM_ID}	</select>    <select id="getLatestPcVersionInfo" resultType="pcVersion">		SELECT 	id,				version,				downloadUrl,				fileAbsPath as path,				firstCreationDate,				lastUpdateDate		FROM mPPS_Ppc_Version		Where id = (SELECT max(id) from mPPS_Ppc_Version)	</select></mapper>